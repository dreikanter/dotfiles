#!/usr/bin/env ruby

require "fileutils"
require "optparse"
require "json"

CONFIG_PATH = File.expand_path("~/.dotfiles/dotfiles.json").freeze

def load_config_files
  unless File.exist?(CONFIG_PATH)
    puts "Error: Configuration file not found: #{CONFIG_PATH}"
    exit 1
  end

  begin
    JSON.parse(File.read(CONFIG_PATH))
  rescue JSON::ParserError => e
    puts "Error: Invalid JSON in #{CONFIG_PATH}: #{e.message}"
    exit 1
  end
end

def resolve_destination(src, dest)
  expanded_dest = File.expand_path(dest)

  # If destination ends with a slash, it's a directory - preserve source filename
  if dest.end_with?("/")
    src_filename = File.basename(src)
    File.join(expanded_dest, src_filename)
  else
    expanded_dest
  end
end

def copy_file(src, dest, dry_run)
  resolved_dest = resolve_destination(src, dest)
  puts "#{src} -> #{resolved_dest}"

  src = File.expand_path(src)

  unless File.exist?(src)
    puts "Source file not found: #{src}"
    return false
  end

  return if dry_run

  FileUtils.mkdir_p(File.dirname(resolved_dest))
  File.unlink(resolved_dest) if File.symlink?(resolved_dest)
  FileUtils.cp(src, resolved_dest)
end

def save_dotfiles(dry_run)
  puts "local environment -> dotfiles#{" [DRY RUN]" if dry_run}"
  puts

  config_files = load_config_files
  config_files.each do |local_path, dotfile_path|
    copy_file(local_path, dotfile_path, dry_run)
  end
end

def load_dotfiles(dry_run)
  puts "dotfiles -> local environment#{" [DRY RUN]" if dry_run}"
  puts

  config_files = load_config_files
  config_files.each do |local_path, dotfile_path|
    copy_file(dotfile_path, local_path, dry_run)
  end
end

# Parse arguments
options = { dry_run: false }

parser = OptionParser.new do |opts|
  opts.banner = "Usage: #{File.basename($0)} COMMAND [OPTIONS]"
  opts.separator "Manage dotfiles configuration"
  opts.separator ""
  opts.separator "Commands:"
  opts.separator "  save        Copy local environment configuration to dotfiles"
  opts.separator "  load        Load dotfiles configuration to local environment"
  opts.separator ""
  opts.separator "Options:"

  opts.on("-n", "--dry-run", "Show what would be done") do
    options[:dry_run] = true
  end

  opts.on("-h", "--help", "Show this help message") do
    puts opts
    exit 0
  end
end

begin
  parser.parse!
rescue OptionParser::InvalidOption => e
  puts "Error: #{e}"
  puts parser
  exit 1
end

if ARGV.empty?
  puts parser
  exit 0
end

command = ARGV[0]

case command
when "save"
  save_dotfiles(options[:dry_run])
when "load"
  load_dotfiles(options[:dry_run])
else
  puts "Unknown command: #{command}"
  exit 1
end
